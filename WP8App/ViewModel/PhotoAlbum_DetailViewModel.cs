// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of PhotoAlbum_Detail ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class PhotoAlbum_DetailViewModel : ViewModelsBase.VMBase, IViewModels.IPhotoAlbum_DetailViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.PhotoAlbum_PhotoAlbumCollection _photoAlbum_PhotoAlbumCollection;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoAlbum_DetailViewModel" /> class.
        /// </summary>
        /// <param name="photoAlbum_PhotoAlbumCollection">The Photo Album_ Photo Album Collection.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public PhotoAlbum_DetailViewModel(Repositories.PhotoAlbum_PhotoAlbumCollection photoAlbum_PhotoAlbumCollection, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_photoAlbum_PhotoAlbumCollection = photoAlbum_PhotoAlbumCollection;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private Entities.PhotoAlbumCollectionSchema _currentPhotoAlbumCollectionSchema;

        /// <summary>
        /// CurrentPhotoAlbumCollectionSchema property.
        /// </summary>		
        public Entities.PhotoAlbumCollectionSchema CurrentPhotoAlbumCollectionSchema
        {
            get
            {
				return _currentPhotoAlbumCollectionSchema;
            }
            set
            {
                SetProperty(ref _currentPhotoAlbumCollectionSchema, value);
            }
        }
	
		private bool _hasNextpanoramaPhotoAlbum_Detail0;

        /// <summary>
        /// HasNextpanoramaPhotoAlbum_Detail0 property.
        /// </summary>		
        public bool HasNextpanoramaPhotoAlbum_Detail0
        {
            get
            {
				return _hasNextpanoramaPhotoAlbum_Detail0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaPhotoAlbum_Detail0, value);
            }
        }
	
		private bool _hasPreviouspanoramaPhotoAlbum_Detail0;

        /// <summary>
        /// HasPreviouspanoramaPhotoAlbum_Detail0 property.
        /// </summary>		
        public bool HasPreviouspanoramaPhotoAlbum_Detail0
        {
            get
            {
				return _hasPreviouspanoramaPhotoAlbum_Detail0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaPhotoAlbum_Detail0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechPhotoAlbum_DetailStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechPhotoAlbum_DetailStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentPhotoAlbumCollectionSchema.Title);
        }
		

        private ICommand _textToSpeechPhotoAlbum_DetailStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechPhotoAlbum_DetailStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechPhotoAlbum_DetailStaticControlCommand
        {
            get { return _textToSpeechPhotoAlbum_DetailStaticControlCommand = _textToSpeechPhotoAlbum_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechPhotoAlbum_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the SharePhotoAlbum_DetailStaticControlCommand command.
        /// </summary>
        public  void SharePhotoAlbum_DetailStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentPhotoAlbumCollectionSchema.Title, "", "", CurrentPhotoAlbumCollectionSchema.Image);
        }
		

        private ICommand _sharePhotoAlbum_DetailStaticControlCommand;

        /// <summary>
        /// Gets the SharePhotoAlbum_DetailStaticControlCommand command.
        /// </summary>
        public ICommand SharePhotoAlbum_DetailStaticControlCommand
        {
            get { return _sharePhotoAlbum_DetailStaticControlCommand = _sharePhotoAlbum_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(SharePhotoAlbum_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartPhotoAlbum_DetailStaticControlCommand command.
        /// </summary>
        public  void PinToStartPhotoAlbum_DetailStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IPhotoAlbum_DetailViewModel), CreateTileInfoPhotoAlbum_DetailStaticControl());
        }
		

        private ICommand _pinToStartPhotoAlbum_DetailStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartPhotoAlbum_DetailStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartPhotoAlbum_DetailStaticControlCommand
        {
            get { return _pinToStartPhotoAlbum_DetailStaticControlCommand = _pinToStartPhotoAlbum_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartPhotoAlbum_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaPhotoAlbum_Detail0 command.
        /// </summary>
        public async void NextpanoramaPhotoAlbum_Detail0Delegate() 
        {
				LoadingCurrentPhotoAlbumCollectionSchema = true;
			var next = await  _photoAlbum_PhotoAlbumCollection.Next(CurrentPhotoAlbumCollectionSchema);

			if(next != null)
				CurrentPhotoAlbumCollectionSchema = next;

			RefreshHasPrevNext();
        }
		
		
        private bool _loadingCurrentPhotoAlbumCollectionSchema;
		
        public bool LoadingCurrentPhotoAlbumCollectionSchema
        {
            get { return _loadingCurrentPhotoAlbumCollectionSchema; }
            set { SetProperty(ref _loadingCurrentPhotoAlbumCollectionSchema, value); }
        }

        private ICommand _nextpanoramaPhotoAlbum_Detail0;

        /// <summary>
        /// Gets the NextpanoramaPhotoAlbum_Detail0 command.
        /// </summary>
        public ICommand NextpanoramaPhotoAlbum_Detail0
        {
            get { return _nextpanoramaPhotoAlbum_Detail0 = _nextpanoramaPhotoAlbum_Detail0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaPhotoAlbum_Detail0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaPhotoAlbum_Detail0 command.
        /// </summary>
        public  void PreviouspanoramaPhotoAlbum_Detail0Delegate() 
        {
			var prev =  _photoAlbum_PhotoAlbumCollection.Previous(CurrentPhotoAlbumCollectionSchema);

			if(prev != null)
				CurrentPhotoAlbumCollectionSchema = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaPhotoAlbum_Detail0;

        /// <summary>
        /// Gets the PreviouspanoramaPhotoAlbum_Detail0 command.
        /// </summary>
        public ICommand PreviouspanoramaPhotoAlbum_Detail0
        {
            get { return _previouspanoramaPhotoAlbum_Detail0 = _previouspanoramaPhotoAlbum_Detail0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaPhotoAlbum_Detail0Delegate); }
        }

        private async void RefreshHasPrevNext()
        {
            HasPreviouspanoramaPhotoAlbum_Detail0 = _photoAlbum_PhotoAlbumCollection.HasPrevious(CurrentPhotoAlbumCollectionSchema);
			HasNextpanoramaPhotoAlbum_Detail0 = await _photoAlbum_PhotoAlbumCollection.HasNext(CurrentPhotoAlbumCollectionSchema);
			LoadingCurrentPhotoAlbumCollectionSchema = false;
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is Entities.PhotoAlbumCollectionSchema)) { return; }
                
                CurrentPhotoAlbumCollectionSchema = value as Entities.PhotoAlbumCollectionSchema;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the PhotoAlbum_DetailStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoPhotoAlbum_DetailStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentPhotoAlbumCollectionSchema.Title,
                Title = CurrentPhotoAlbumCollectionSchema.Title,
                BackTitle = CurrentPhotoAlbumCollectionSchema.Title,
                BackContent = string.Empty,
                Count = 0,
                BackgroundImagePath = CurrentPhotoAlbumCollectionSchema.Image,
                BackBackgroundImagePath = CurrentPhotoAlbumCollectionSchema.Image,
                LogoPath = "Logo-89401204-353b-44fd-86c0-eeff17be5801.png"
            };
            return tileInfo;
        }
    }
}

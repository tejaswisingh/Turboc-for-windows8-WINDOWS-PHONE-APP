// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   DataSource.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Entities=WPAppStudio.Entities;
using IServices=WPAppStudio.Services.Interfaces;
using RepositoriesBase=WPAppStudio.Repositories.Base;

namespace WPAppStudio.Repositories
{
    /// <summary>
    /// momentsSchema data source.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public class moments_momentsCollection : Imoments_momentsCollection 
    {
		private static bool AlreadyAccessed = false;
		private const int MaxResults = 10;
		private readonly RepositoriesBase.IJsonDataSource _jsonDataSource; 
		private IServices.IStorageService _storageService;
        private IServices.IInternetService _internetService;
		private const string DataServiceUrl = "http://apps.windowsstore.com/api/data?clientId={0}&appId={1}&datasourceName={2}&pageIndex={3}&blockSize={4}";

        /// <summary>
        /// Initializes a new instance of the <see cref="moments_momentsCollection" /> class.
        /// </summary>
        /// <param name="jsonDataSource">A JSON based data source.</param>
        public moments_momentsCollection(RepositoriesBase.IJsonDataSource jsonDataSource, IServices.IInternetService internetService, IServices.IStorageService storageService)
        {
            _jsonDataSource = jsonDataSource;
			_storageService = storageService;
            _internetService = internetService;
        }
		
        /// <summary>
        /// Retrieves the data from a dynamic data service (URL specified in DataServiceUrl) , in an observable collection of momentsSchema items.
        /// </summary>
        /// <returns>An observable collection of momentsSchema items.</returns>
        public async Task<ObservableCollection<Entities.momentsSchema>> GetData(int numPage)
        {
			if(!AlreadyAccessed)
			{
				AlreadyAccessed = true;
				return await Refresh();
			}
			
            return await LoadData(numPage);
        }
		
        /// <summary>
        /// Retrieves the data from a dynamic data service (URL specified in DataServiceUrl) , in an observable collection of momentsSchema items.
        /// </summary>
        /// <returns>An observable collection of momentsSchema items.</returns>
        public async Task<ObservableCollection<Entities.momentsSchema>> Refresh()
        {	
			return await LoadData(0, true);
        }
		
		/// <summary>
        /// Checks if data source has a element before the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a previous element, false if there is not</returns>
		public bool HasPrevious(Entities.momentsSchema current)
        {
			var data = new List<Entities.momentsSchema>(_storageService.Load<Entities.momentsSchema[]>("moments_momentsCollection"));

            data = data.OrderBy(i => i.Title).ToList();
			
            if (current == null || !data.Any()) return false;

            return data.IndexOf(current) > 0;
        }
		
		/// <summary>
        /// Checks if data source has a element after the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a next element, false if there is not</returns>
		public async Task<bool> HasNext(Entities.momentsSchema current)
        {
			var data = new List<Entities.momentsSchema>(_storageService.Load<Entities.momentsSchema[]>("moments_momentsCollection"));

            data = data.OrderBy(i => i.Title).ToList();
			
            if (current == null || !data.Any()) return false;

            if(data.IndexOf(current) < data.Count - 1) return true;
			
			var nextPageData = await GetData((int)Math.Ceiling(data.Count / (double)MaxResults));

		    return nextPageData.Any();
        }
		
		/// <summary>
        /// Retrieves the previous element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The previous element from items, if it exists. Otherwise, returns null</returns>
        public Entities.momentsSchema Previous(Entities.momentsSchema current)
        {
			var data = new List<Entities.momentsSchema>(_storageService.Load<Entities.momentsSchema[]>("moments_momentsCollection"));

            data = data.OrderBy(i => i.Title).ToList();
		
            if (current == null || !data.Any()) return null;

            var index = data.IndexOf(current);

            if (index == 0 || index == -1) return null;

            return data[index - 1];
        }
		
		/// <summary>
        /// Retrieves the next element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The next element from items, if it exists. Otherwise, returns null</returns>
        public async Task<Entities.momentsSchema> Next(Entities.momentsSchema current)
        {
			var data = new List<Entities.momentsSchema>(_storageService.Load<Entities.momentsSchema[]>("moments_momentsCollection"));

            data = data.OrderBy(i => i.Title).ToList();
			
            if (current == null || !data.Any()) return null;

		    var index = data.IndexOf(current);
			
			if (index == -1) return null;

		    if (index != data.Count - 1) return data[index + 1];

		    var nextPageData = await GetData((int)Math.Ceiling(data.Count / (double)MaxResults));

		    if (!nextPageData.Any()) return null;

		    return nextPageData.First();
        } 
		 
        private async Task<ObservableCollection<Entities.momentsSchema>> LoadData(int pageNumber, bool forceRecaching = false)
        {
			var storedItems = _storageService.Load<Entities.momentsSchema[]>("moments_momentsCollection");
			var storedCollection = storedItems != null ? storedItems.ToList() : new List<Entities.momentsSchema>();
			
            var pageNotSaved = Math.Ceiling(storedCollection.Count() / (double)MaxResults) - 1 < pageNumber;
			
            if (_internetService.IsNetworkAvailable() && (pageNotSaved || forceRecaching))
            {
				var newItems = await _jsonDataSource.LoadRemote<Entities.momentsSchema[]>(string.Format(DataServiceUrl, "229465","a89a8634-521e-4218-86ee-9ae677eb871b", "momentsCollection", pageNumber, MaxResults));

                if (forceRecaching)
                    storedCollection = new List<Entities.momentsSchema>();

                if(newItems != null && newItems.Any())
				{
					storedCollection.AddRange(newItems);
					_storageService.Save("moments_momentsCollection", storedCollection.ToArray());
				}
			}
				
            return new ObservableCollection<Entities.momentsSchema>(storedCollection.OrderBy(i=>i.Title).Skip(pageNumber * MaxResults).Take(MaxResults));
        }
	}	
}

